<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	">
	
	<bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}"/>
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="user" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	<context:property-placeholder location="classpath:jdbc.properties"/>
	<!--
		由于hibernate4已经完全可以实现事务了 与spring3.1中的hibernatedao,hibernateTemplete等有冲突，
		所以spring3.1里已经不提供hibernatedaosupport,hibernateTemplete了，只能用hibernate原始的方式用session
		Session session = sessionFactory.getCurrentSession(); 
		* 事务：service 开启事务最好为 propagation = required
	-->
	<bean name="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 以下的配置方式都可以，自已看着用 -->
    	<property name="configLocation" value="classpath:hibernate.cfg.xml" />
<!--     	<property name="configurationClass" value="org.hibernate.cfg.AnnotationConfiguration" /> -->
    	<!-- <property name="hibernateProperties">
    		<props>
    			<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5InnoDBDialect</prop>
    			<prop key="hibernate.hbm2ddl.auto">create-drop</prop>
    			<prop key="hibernate.format_sql">false</prop>
    			<prop key="hibernate.show_sql">true</prop>
    		</props>
    	</property> -->
    	
    	<property name="packagesToScan" >
     		<array>
    			<value>org.luyanfeng.myblog.entity</value>
    		</array>
    	</property>
    	<!-- <property name="annotatedPackages">
    		<array>
    			<value>org.luyanfeng.myblog.entity</value>
    		</array>
    	</property> -->
    	<!-- <property name="annotatedClasses">
    		<array>
    			<value>org.luyanfeng.myblog.entity.UserEntity</value>
    		</array>
    	</property> -->
	</bean>
<!-- 事务 -->
	<bean name="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
<!-- 	<aop:aspectj-autoproxy proxy-target-class="true"/> -->
	<aop:config proxy-target-class="true">
		<aop:pointcut expression="execution(public * org.luyanfeng.myblog.service.iml..*(..) )" id="serviceMethods"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/>
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="del*" 			propagation="REQUIRED" read-only="false"/>
			<tx:method name="add*" 			propagation="REQUIRED" read-only="false"/>
			<tx:method name="save*" 		propagation="REQUIRED" read-only="false"/>
			<tx:method name="execute*" 		propagation="REQUIRED" read-only="false"/>
			
			<tx:method name="get*" 			propagation="REQUIRED" read-only="true"/>		
			<tx:method name="is*" 			propagation="REQUIRED" read-only="true"/>
			<tx:method name="shouldLogin" 	propagation="REQUIRED" read-only="true"/>
<!-- 			<tx:method name="*" propagation="REQUIRED" read-only="true"/> -->
		</tx:attributes>
	</tx:advice>
</beans>